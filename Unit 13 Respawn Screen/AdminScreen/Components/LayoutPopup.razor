@inject IJSRuntime JsRuntime
@inherits MainLayout
@inject Unit_13_Respawn_Screen.Data.AppState AppState

<div style=@DialogStyle class="dialog-window">
  <div class="dialog-window-content">
      <div class="top-flex">
            <p class="dialog-message">Please choose a layout to load...</p>
            <div class="layout-container">
                <NavLink class="layout" style="text-decoration:none; color:white;" @onclick="@(() => LoadLayout("hi"))" href="" Match="NavLinkMatch.All">
                    <span aria-hidden="true">NEW</span> 
                </NavLink>
            </div>
      </div>
    <div class="layouts-flex">
        @foreach (Data.Layout obj in layouts)
            {
            <div class="layout-container">
                <NavLink class="layout" style="text-decoration:none; color:white;" @onclick="@(() => LoadLayout("hi"))" href="" Match="NavLinkMatch.All">
                    <span @onclick="@(e => SelectLayout(obj))" aria-hidden="true">@obj.Name</span> 
                </NavLink>
            </div>
            }
    </div>
  </div>
</div>

@code{
    [Parameter] public EventCallback<Unit_13_Respawn_Screen.Data.Layout> SetLayout { get; set; }
    private string DialogStyle = "display: block;";
    private Data.Layout[] layouts = Data.BackendService.Layouts;

    private void ShowDialog()
    {
        DialogStyle = "display: block;";
    }
    private void HideDialog(Unit_13_Respawn_Screen.Data.Layout selectedLayout)
    {
    }
    private void LoadLayout(string name)
    {
        selectedLayout = name;
    }

    void SelectLayout(Unit_13_Respawn_Screen.Data.Layout layout)
    {
        DialogStyle = "display: none;";
        AppState.SetLayout(layout);
    }
}